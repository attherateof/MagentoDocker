input {
  file {
    path => "/var/www/html/var/log/**/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null" # enable it for dev
    codec => multiline {
      pattern => "^\[.*\]"  # Start of a new log line (timestamped)
      negate => true
      what => "previous"
    }
  }
}

filter {
  # Extract timestamp, log level, channel, and full log message
  grok {
      match => {
      "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{WORD:channel}\.%{LOGLEVEL:level}: %{GREEDYDATA:raw_log}"
      }
      add_tag => ["grok_success"]
      remove_tag => ["_grokparsefailure"]
  }

  if !([level] in ["DEBUG", "INFO", "NOTICE", "WARNING", "ERROR", "CRITICAL", "ALERT", "EMERGENCY"]) {
      drop { }
  }

  date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
  }

  # Extract clean message, context, and extra from raw_log
  grok {
      match => {
          "raw_log" => [
              # Case 1: some message {some_json_object} {some_json_object}
              "(?m)^(?<clean_message>.*?)\s(?<context_json>\{.*?\})\s(?<extra_json>\{.*?\})$",
              # Case 2: some message {some_json_object} []
              "(?m)^(?<clean_message>.*?)\s(?<context_json>\{.*?\})\s(\[\])$",
              # Case 3: some message [] {some_json_object}
              "(?m)^(?<clean_message>.*?)\s(\[\])\s(?<extra_json>\{.*?\})$",
              # Case 4: some message [] []
              "(?m)^(?<clean_message>.*?)\s(\[\])\s(\[\])$",
              # Case 5: only clean message
              "(?m)^(?<clean_message>.*?)$"
          ]
      }
  }

  if [context_json] {
      mutate {
          gsub => [
              "context_json", "\n", " ",
              "context_json", "\r", " ", 
              "context_json", "\s+", " "
          ]
      }
      ruby {
          code => "
              require 'json'

              ctx = event.get('context_json')
              if ctx && !ctx.empty?
                  begin
                      parsed = JSON.parse(ctx)
                      event.set('context', parsed)
                      event.remove('context_json')
                  rescue JSON::ParserError
                      event.set('context_string', ctx)
                      event.remove('context')
                      event.remove('context_json')
                  end
              else
                  event.set('context_string', 'No valid JSON')
                  event.remove('context')
                  event.remove('context_json')
              end
          "
      }
  }

  if [extra_json] {
      json {
          source => "extra_json"
          target => "extra"
          skip_on_invalid_json => true
      }
  }

  mutate {
      rename => { "clean_message" => "message" }
      remove_field => ["timestamp", "raw_log", "extra_json", "event"] 
  }
}

output {
    opensearch {
      hosts => ["http://opensearch-primary:9200"]
      index => "magento2-log-%{+YYYY.MM}"
      ssl => false
      ssl_certificate_verification => false
    }
}